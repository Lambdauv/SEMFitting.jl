{
    "docs": [
        {
            "location": "/", 
            "text": "SEMFitting.jl\n\n\nA package for fitting images from the SEM in the Painter Group cleanroom.\n\n\n\n\nInstallation\n\n\n\n\nPkg.clone(\"https://github.com/ajkeller34/SEMFitting.jl.git\")\n\n\n\n\n\n\nUsage\n\n\nForthcoming\n\n\n\n\nAPI\n\n\n#\n\n\nSEMFitting.approxscale!\n \n \nFunction\n.\n\n\n\n\napproxscale!(img::AbstractImage, scale, scalerow=1758)\n\n\nGiven an SEM image \nimg\n with scale bar of physical length \nscale\n, returns physical length per pixel and sets the \nspacedirections\n property of the image. Assumes that the scale bar is alone in pixel row \nscalerow\n of the image, which defaults to 1758 (good for Painter group SEM).\n\n\nCurrently uses the far extrema of the scale bar to determine length.\n\n\n#\n\n\nSEMFitting.colrow\n \n \nFunction\n.\n\n\n\n\ncolrow(df::DataFrame, cols, rows)\n\n\nUses some clustering to determine rows and columns of found objects in \ndf\n. You should tell it the number of columns and rows for the correct clustering.\n\n\n#\n\n\nSEMFitting.sizerange\n \n \nFunction\n.\n\n\n\n\nsizerange(img::AbstractImage, scale, min, max; thresh=0.5, tone=true)\n\n\nDoes grayscale conversion and thresholding of image \nimg\n, with \nthresh\n for thresholding and \ntone\n for optional inversion (default to true).\n\n\nNext, extract components of the binary image that are within a specified size range \nmin\n to \nmax\n where these are units of area in terms of the approximate physical scale of the image. The \nscale\n parameter is the length of the scale bar.\n\n\nReturns \nim, df\n where \nim\n is a black and white image only showing the objects in the specified size range, and \ndf\n is a \nDataFrame\n with the sizes, image indices, and centroids of the found objects.\n\n\n#\n\n\nSEMFitting.groundplane\n \n \nFunction\n.\n\n\n\n\ngroundplane(img::AbstractImage, cols_or_rows, dim, spacing, noiselen, minlen, maxlen)\n\n\nGiven some image without rotation with rectangular holes in a ground plane...\n\n\n\n\nimg\n - a binary image (expects grayscale).\n\n\ncols_or_rows\n- typically one of the results from \ncolrow\n.\n\n\ndim\n - 1 or 2 (should be 1 for col, 2 for row)\n\n\nspacing\n - The design spacing between hole centers in the ground plane.\n\n\nnoiselen\n - Contiguous lengths of 1 or 0 shorter than this are ignored in length determination.\n\n\nminlen\n - Reject lengths shorter than this from the final results.\n\n\nmaxlen\n - Reject lengths longer than this from the final results.", 
            "title": "Home"
        }, 
        {
            "location": "/#semfittingjl", 
            "text": "A package for fitting images from the SEM in the Painter Group cleanroom.", 
            "title": "SEMFitting.jl"
        }, 
        {
            "location": "/#installation", 
            "text": "Pkg.clone(\"https://github.com/ajkeller34/SEMFitting.jl.git\")", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "Forthcoming", 
            "title": "Usage"
        }, 
        {
            "location": "/#api", 
            "text": "#  SEMFitting.approxscale!     Function .   approxscale!(img::AbstractImage, scale, scalerow=1758)  Given an SEM image  img  with scale bar of physical length  scale , returns physical length per pixel and sets the  spacedirections  property of the image. Assumes that the scale bar is alone in pixel row  scalerow  of the image, which defaults to 1758 (good for Painter group SEM).  Currently uses the far extrema of the scale bar to determine length.  #  SEMFitting.colrow     Function .   colrow(df::DataFrame, cols, rows)  Uses some clustering to determine rows and columns of found objects in  df . You should tell it the number of columns and rows for the correct clustering.  #  SEMFitting.sizerange     Function .   sizerange(img::AbstractImage, scale, min, max; thresh=0.5, tone=true)  Does grayscale conversion and thresholding of image  img , with  thresh  for thresholding and  tone  for optional inversion (default to true).  Next, extract components of the binary image that are within a specified size range  min  to  max  where these are units of area in terms of the approximate physical scale of the image. The  scale  parameter is the length of the scale bar.  Returns  im, df  where  im  is a black and white image only showing the objects in the specified size range, and  df  is a  DataFrame  with the sizes, image indices, and centroids of the found objects.  #  SEMFitting.groundplane     Function .   groundplane(img::AbstractImage, cols_or_rows, dim, spacing, noiselen, minlen, maxlen)  Given some image without rotation with rectangular holes in a ground plane...   img  - a binary image (expects grayscale).  cols_or_rows - typically one of the results from  colrow .  dim  - 1 or 2 (should be 1 for col, 2 for row)  spacing  - The design spacing between hole centers in the ground plane.  noiselen  - Contiguous lengths of 1 or 0 shorter than this are ignored in length determination.  minlen  - Reject lengths shorter than this from the final results.  maxlen  - Reject lengths longer than this from the final results.", 
            "title": "API"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "The ManualScraper.jl package is licensed under the MIT \"Expat\" License:\n\n\n\n\nCopyright (c) 2016: Andrew Keller.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}